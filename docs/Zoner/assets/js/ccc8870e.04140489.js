"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[242],{4270:e=>{e.exports=JSON.parse('{"functions":[{"name":"UpdateIdsOnServer","desc":"Sends zone-id tag sync to the server when streaming is enabled on the client.","params":[{"name":"Type","desc":"Operation to perform","lua_type":"\\"Add\\"|\\"Remove\\""},{"name":"Id","desc":"Zone identifier","lua_type":"string"},{"name":"ZoneParts","desc":"Current zone parts snapshot","lua_type":"{BasePart}"}],"returns":[],"function_type":"static","private":true,"ignore":true,"source":{"line":197,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetConfig","desc":"Sets a numeric, enum-backed config field and mirrors it as a `Config` attribute.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"},{"name":"ConfigName","desc":"Config key to set (e.g. \\"Rate\\")","lua_type":"string"},{"name":"EnumName","desc":"Enum table name in `Enums` (e.g. \\"Rate\\")","lua_type":"string"},{"name":"NameOrId","desc":"Enum id or enum name","lua_type":"number|string"}],"returns":[],"function_type":"static","errors":[{"lua_type":"InvalidEnum","desc":"Raised via warning when name/id does not resolve"}],"private":true,"ignore":true,"source":{"line":223,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetState","desc":"Sets a boolean state flag and mirrors it as a `States` attribute.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"},{"name":"StateName","desc":"State key to set (e.g. \\"Paused\\")","lua_type":"string"},{"name":"State","desc":"Desired state value","lua_type":"boolean"}],"returns":[],"function_type":"static","errors":[{"lua_type":"InvalidState","desc":"Raised via warning when non-boolean is passed"}],"private":true,"ignore":true,"source":{"line":249,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"UpdateActivity","desc":"Recomputes active signals/targets from current connections and updates attributes.\\nAlso toggles the overall `Active` state.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"}],"returns":[{"desc":"The same zone for chaining","lua_type":"Zone"}],"function_type":"static","private":true,"ignore":true,"source":{"line":272,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetEngine","desc":"Creates/initializes the ZoneEngine:\\n- Parallel: sends `Construct` to the ZonerActor.\\n- Serial: constructs a local engine with a direct signal callback.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"}],"returns":[],"function_type":"static","private":true,"ignore":true,"source":{"line":378,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetInstances","desc":"Creates the zone\u2019s folders (`States`, `ActiveTargets`, `ActiveSignals`, `Config`),\\nparents them under the holder, and seeds default attributes from tables.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"}],"returns":[],"function_type":"static","private":true,"ignore":true,"source":{"line":407,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetEvents","desc":"Wires Ancestry change protection and CollectionService tag listeners for:\\nzone parts and (optionally) holder instances.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"}],"returns":[],"function_type":"static","private":true,"ignore":true,"source":{"line":467,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetEvents","desc":"Wires Ancestry change protection and CollectionService tag listeners for:\\nzone parts and (optionally) holder instances.","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"}],"returns":[],"function_type":"static","private":true,"ignore":true,"source":{"line":538,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"Initialize","desc":"Full constructor pipeline for a zone (core \u2192 instances \u2192 events \u2192 engine).","params":[{"name":"Zone","desc":"Target zone instance","lua_type":"Zone"}],"returns":[{"desc":"Initialized zone","lua_type":"Zone"}],"function_type":"static","private":true,"ignore":true,"source":{"line":599,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"New","desc":"Constructs a new private Zone object. Called by Zoner internals.","params":[{"name":"Container","desc":"Container that defines bounds","lua_type":"Types.ZoneContainer"},{"name":"Config","desc":"Resolved config (may be defaulted)","lua_type":"Types.ZoneConfig"},{"name":"Holder","desc":"Actor/Group host of this zone","lua_type":"Types.ZonerHolder"},{"name":"ZonerFolder","desc":"Root Zoner folder for this VM","lua_type":"Types.ZonerFolder"},{"name":"Id","desc":"Unique identifier for this zone","lua_type":"string"}],"returns":[{"desc":"New private zone instance","lua_type":"Zone"}],"function_type":"static","private":true,"source":{"line":621,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"Destroy","desc":"Cleans up signals, connections, tags, engine, groups, and backing instances.\\nSets `Destroyed = true` and clears the holder\u2019s Id attribute to trigger removal.","params":[],"returns":[],"function_type":"method","source":{"line":694,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"BindToGroup","desc":"Binds this zone to an existing group (sets true in the group\u2019s `Zones` attributes).","params":[{"name":"GroupName","desc":"Group to bind","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":766,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"UnbindFromGroup","desc":"Unbinds this zone from a group (clears the Id attribute in the group\u2019s `Zones`).","params":[{"name":"GroupName","desc":"Group to unbind","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":785,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"Relocate","desc":"Moves the zone\u2019s parts under a WorldModel container. Sets `Relocated = true`.","params":[],"returns":[{"desc":"Self (for chaining)","lua_type":"Zone"}],"function_type":"method","source":{"line":804,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetDetection","desc":"Updates the default detection coverage and mode.","params":[{"name":"DetectionCoverage","desc":"Coverage enum or id","lua_type":"Enums.DetectionCoverages|number"},{"name":"DetectionMode","desc":"Mode enum or id","lua_type":"Enums.DetectionModes|number"}],"returns":[],"function_type":"method","source":{"line":851,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetRate","desc":"Updates the evaluation rate used by this zone.","params":[{"name":"Rate","desc":"Rate enum or id","lua_type":"Enums.Rates|number"}],"returns":[],"function_type":"method","source":{"line":864,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"SetSimulation","desc":"Updates the simulation step (rejects `PreRender` on server).","params":[{"name":"Simulation","desc":"Simulation enum or id","lua_type":"Enums.Simulations|number"}],"returns":[],"function_type":"method","source":{"line":876,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"LogConfig","desc":"Prints a human-readable summary of the zone\u2019s current configuration.","params":[],"returns":[],"function_type":"method","source":{"line":905,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"GetZoneParts","desc":"Returns the BaseParts that compose this zone (empty for partless boxes).","params":[],"returns":[{"desc":"Array of parts","lua_type":"{BasePart}"}],"function_type":"method","source":{"line":935,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"GetZonePartHolders","desc":"Returns holder instances (Folders/Models) that own the zone\u2019s parts.","params":[],"returns":[{"desc":"Array of holder instances","lua_type":"{Instance}"}],"function_type":"method","source":{"line":947,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"InGroup","desc":"Checks whether this zone is currently present in a named group.","params":[{"name":"GroupName","desc":"Group to check","lua_type":"string"}],"returns":[{"desc":"True if the zone is in the group","lua_type":"boolean"}],"function_type":"method","since":"0.9.6","source":{"line":961,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"GetRandomPoint","desc":"Returns a random point inside the zone volume.  \\nWorks with part-backed shapes (block/sphere/complex) and partless boxes.","params":[],"returns":[{"desc":"Point inside the zone","lua_type":"Vector3"}],"function_type":"method","since":"0.9.7","source":{"line":977,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"GetTouchingParts","desc":"Returns all BaseParts currently overlapping this zone\u2019s bounds.","params":[],"returns":[{"desc":"Array of overlapping parts","lua_type":"{BasePart}"}],"function_type":"method","since":"0.9.7","source":{"line":1033,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"Step","desc":"Manually steps detection. Present only when `ManualStepping = true`\\nand the zone is hosted in a serial holder (group).","params":[{"name":"DeltaTime","desc":"RunService delta time","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":1092,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"_OnZonePartUpdate","desc":"Internal handler for zone-part tag add/remove, maintains internal arrays and tags.","params":[{"name":"Purpose","desc":"Operation performed","lua_type":"\\"Add\\"|\\"Remove\\""},{"name":"ZonePart","desc":"Affected zone part","lua_type":"BasePart"}],"returns":[],"function_type":"method","private":true,"source":{"line":1115,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"_OnHolderInstanceUpdate","desc":"Internal handler for holder tag add/remove; manages arrays and ChildAdded hook.","params":[{"name":"Purpose","desc":"Operation performed","lua_type":"\\"Add\\"|\\"Remove\\""},{"name":"Holder","desc":"Affected holder instance","lua_type":"Instance"}],"returns":[],"function_type":"method","private":true,"source":{"line":1176,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"_OnZoneSignalReceived","desc":"Receives engine messages, resolves the signal name, and fires the matching GoodSignal.","params":[{"name":"Purpose","desc":"Engine purpose key","lua_type":"string"},{"name":"...","desc":"Signal payload","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":1253,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"__index","desc":"Metamethod that exposes public fields, live config/state, dynamic signal creation,\\nand selected internals (e.g., `_ZoneFolder`, `ZoneParts`, `ZoneBoxes`).","params":[{"name":"Index","desc":"Requested key","lua_type":"string"}],"returns":[{"desc":"Value or nil","lua_type":"any"}],"function_type":"method","private":true,"ignore":true,"source":{"line":1280,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"__newindex","desc":"Metamethod that supports assignment to select fields (`EnterDetection`, `ExitDetection`,\\n`Paused`, `Visible`) and rejects others.","params":[{"name":"Index","desc":"Key to set","lua_type":"string"},{"name":"Value","desc":"Value to assign","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"ignore":true,"source":{"line":1347,"path":"src/Modules/Internal/Zone/init.luau"}},{"name":"UpdateGlobalScope","desc":"Updates engine-global scope with the provided holder (used by Zoner internals).","params":[{"name":"ZonerHolder","desc":"Actor/Group to register","lua_type":"Types.ZonerHolder"}],"returns":[],"function_type":"static","private":true,"ignore":true,"source":{"line":1373,"path":"src/Modules/Internal/Zone/init.luau"}}],"properties":[],"types":[],"name":"Private_Zone","desc":"Internal, engine-backed Zone instance created by `Zoner.New(...)`.  \\nThis is **not** the public API; external code should use the public [`Zone`] class.\\n\\n**What it represents**\\n- A single spatial zone defined by either:\\n  - part-backed containers (BaseParts / Models / Folders), or\\n  - partless box bounds (`{ {CFrame = ..., Size = ...}, ... }`).\\n- Hosted under a Zoner holder:\\n  - **ZonerActor** (parallel execution), or\\n  - **ZonerGroup** (serial execution).\\n\\n**Responsibilities**\\n- Manages CollectionService tags for zone parts/holders and handles streaming add/remove.\\n- Maintains a `_ZoneFolder` with `States`, `ActiveTargets`, `ActiveSignals`, and `Config` as attributes.\\n- Emits GoodSignal events (player/part/local-player) and derives `Active` from connection usage.\\n- Bridges to `ZoneEngine` via Actor messages (parallel) or direct calls (serial).\\n- Supports `Relocate()` into a WorldModel for safe spatial queries.\\n\\n**Performance model**\\n- O(1) internal lookups, parallelized when backed by a **ZonerActor**.\\n- `Step()` exists only in serial with `ManualStepping = true`; otherwise it is removed.","private":true,"source":{"line":95,"path":"src/Modules/Internal/Zone/init.luau"}}')}}]);