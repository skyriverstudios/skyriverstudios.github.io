"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[846],{5298:e=>{e.exports=JSON.parse('{"functions":[{"name":"Destroy","desc":"Cleans up signals, connections, tags, and backing instances for this Zone.","params":[],"returns":[],"function_type":"method","source":{"line":288,"path":"src/Types/PublicZone.luau"}},{"name":"Relocate","desc":"Method that will Relocate the Zone to a WorldModel not in the Workspace","params":[],"returns":[{"desc":"Self Zone Object","lua_type":"Zone"}],"function_type":"method","source":{"line":298,"path":"src/Types/PublicZone.luau"}},{"name":"SetDetection","desc":"Method to Update/Set the Default Part/TrackedItem Detection of the Zone:","params":[{"name":"DetectionCoverage","desc":"DetectionCoverages Enum or Enum Id.","lua_type":"Enum.DetectionCoverages | number"},{"name":"DetectionMode","desc":"DetectionModes Enum or Enum Id.","lua_type":"Enum.DetectionModes | number"}],"returns":[],"function_type":"method","source":{"line":308,"path":"src/Types/PublicZone.luau"}},{"name":"SetRate","desc":"Method to Update/Set the Default Rate of the Zone:","params":[{"name":"Rate","desc":"Rates Enum or Enum Id.","lua_type":"Enum.Rates | number"}],"returns":[],"function_type":"method","source":{"line":317,"path":"src/Types/PublicZone.luau"}},{"name":"SetSimulation","desc":"Method to Update/Set the Default Simulation (RunService Event) of the Zone:","params":[{"name":"Simulation","desc":"Simulation Enum or Enum Id.","lua_type":"Enum.Simulations | number"}],"returns":[],"function_type":"method","source":{"line":326,"path":"src/Types/PublicZone.luau"}},{"name":"LogConfig","desc":"Method to print out all the Config Names","params":[],"returns":[],"function_type":"method","source":{"line":334,"path":"src/Types/PublicZone.luau"}},{"name":"GetZoneParts","desc":"Method to return the array of ZoneParts","params":[],"returns":[{"desc":"","lua_type":"{BasePart}"}],"function_type":"method","source":{"line":344,"path":"src/Types/PublicZone.luau"}},{"name":"GetZonePartHolders","desc":"Method to return the array of ZonePartHolders","params":[],"returns":[{"desc":"","lua_type":"{Instance}"}],"function_type":"method","source":{"line":354,"path":"src/Types/PublicZone.luau"}},{"name":"GetRandomPoint","desc":"Returns a random point within this Zone\u2019s bounds.  \\nWorks with partless boxes (math) and part-backed zones (shape-aware).","params":[],"returns":[{"desc":"Point inside the zone volume","lua_type":"Vector3"}],"function_type":"method","source":{"line":365,"path":"src/Types/PublicZone.luau"}},{"name":"GetTouchingParts","desc":"Method to return an array of all BaseParts currently touching this Zone.\\n\\nWorks for both Box-style and Part-style Zones","params":[],"returns":[{"desc":"","lua_type":"{BasePart}"}],"function_type":"method","source":{"line":377,"path":"src/Types/PublicZone.luau"}},{"name":"Step","desc":"Method that can be called manually in a custom RunService event to step the Zone\'s detection logic\\n\\nOnly present if `ManualStepping` Config is true and the holder type is a group, if not, this method is removed","params":[{"name":"DeltaTime","desc":"RunService event DeltaTime.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":388,"path":"src/Types/PublicZone.luau"}},{"name":"BindToGroup","desc":"Method that will BIND the Zone to the passed Group:","params":[{"name":"GroupName","desc":"Name of the already created group to bind the Zone to","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":397,"path":"src/Types/PublicZone.luau"}},{"name":"UnbindFromGroup","desc":"Method that will UNBIND the Zone to the passed Group:","params":[{"name":"GroupName","desc":"Name of the already created group to bind the Zone to","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":406,"path":"src/Types/PublicZone.luau"}},{"name":"InGroup","desc":"Method to return whether the Zone is in the group or not","params":[{"name":"GroupName","desc":"Name of the group to check","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":417,"path":"src/Types/PublicZone.luau"}}],"properties":[{"name":"Container","desc":"Original container used to construct the Zone (instance tree or partless box table).\\n\\nAccessed: `Zone.Container`","lua_type":"ZoneContainer","readonly":true,"source":{"line":131,"path":"src/Types/PublicZone.luau"}},{"name":"ContainerType","desc":"Indicates whether the Zone is part-backed or partless (boxes).","lua_type":"ZoneContainerType","readonly":true,"source":{"line":139,"path":"src/Types/PublicZone.luau"}},{"name":"Active","desc":"True while any targets/signals are currently active for this Zone.","lua_type":"boolean","readonly":true,"source":{"line":147,"path":"src/Types/PublicZone.luau"}},{"name":"Destroyed","desc":"Set to true after `Destroy()` is called.","lua_type":"boolean","readonly":true,"source":{"line":155,"path":"src/Types/PublicZone.luau"}},{"name":"Paused","desc":"True when detection is paused for this Zone.","lua_type":"boolean","readonly":true,"source":{"line":163,"path":"src/Types/PublicZone.luau"}},{"name":"Visible","desc":"Optional visual/debug flag for this Zone.","lua_type":"boolean","readonly":true,"source":{"line":171,"path":"src/Types/PublicZone.luau"}},{"name":"Detection","desc":"Current detection level value (enum id). Use `SetDetection(...)` to change coverage/mode.","lua_type":"number","readonly":true,"source":{"line":179,"path":"src/Types/PublicZone.luau"}},{"name":"Accuracy","desc":"Accuracy tuning value (enum id), dependent on detection method.","lua_type":"number","readonly":true,"source":{"line":187,"path":"src/Types/PublicZone.luau"}},{"name":"Simulation","desc":"Simulation step (enum id). Set via `SetSimulation(...)`.","lua_type":"number","readonly":true,"source":{"line":195,"path":"src/Types/PublicZone.luau"}},{"name":"Execution","desc":"Execution model (enum id): Serial/Parallel as provided by `Zoner.Enum.Execution`.","lua_type":"number","readonly":true,"source":{"line":203,"path":"src/Types/PublicZone.luau"}},{"name":"EnterDetection","desc":"Enter detection mode/coverage as an enum id. Adjustable via `SetDetection(...)` and related setters.","lua_type":"number","readonly":true,"source":{"line":211,"path":"src/Types/PublicZone.luau"}},{"name":"ExitDetection","desc":"Exit detection mode/coverage as an enum id.","lua_type":"number","readonly":true,"source":{"line":219,"path":"src/Types/PublicZone.luau"}},{"name":"Identifier","desc":"Stable string ID for this Zone (unique within Zoner\u2019s session).\\n\\nAccessed: `Zone.Identifier`","lua_type":"string","readonly":true,"source":{"line":229,"path":"src/Types/PublicZone.luau"}},{"name":"MetaData","desc":"Free-form table you can attach to this Zone for your own bookkeeping.","lua_type":"any","source":{"line":235,"path":"src/Types/PublicZone.luau"}},{"name":"PlayerEntered","desc":"Accessed: `Zone.PlayerEntered`","lua_type":"Signal.Signal<Player>","tags":["event_signal"],"readonly":true,"source":{"line":242,"path":"src/Types/PublicZone.luau"}},{"name":"PlayerExited","desc":"Accessed: `Zone.PlayerExited`","lua_type":"Signal.Signal<Player>","tags":["event_signal"],"readonly":true,"source":{"line":249,"path":"src/Types/PublicZone.luau"}},{"name":"LocalPlayerEntered","desc":"Accessed: `Zone.LocalPlayerEntered`","lua_type":"Signal.Signal<Player>","tags":["event_signal"],"realm":["Client"],"readonly":true,"source":{"line":257,"path":"src/Types/PublicZone.luau"}},{"name":"LocalPlayerExited","desc":"Accessed: `Zone.LocalPlayerExited`","lua_type":"Signal.Signal<Player>","tags":["event_signal"],"realm":["Client"],"readonly":true,"source":{"line":265,"path":"src/Types/PublicZone.luau"}},{"name":"PartEntered","desc":"Accessed: `Zone.PartEntered`","lua_type":"Signal.Signal<BasePart>","tags":["event_signal"],"readonly":true,"source":{"line":272,"path":"src/Types/PublicZone.luau"}},{"name":"PartExited","desc":"Accessed: `Zone.PartExited`","lua_type":"Signal.Signal<BasePart>","tags":["event_signal"],"readonly":true,"source":{"line":279,"path":"src/Types/PublicZone.luau"}}],"types":[{"name":"ZoneContainerType","desc":"Discriminates container representation (\\"Boxes\\" or \\"Instance\\" flavors)","lua_type":"(\'Part\' | \'Holder\' | \'Parts\' | \'Boxes\')","tags":["private_types"],"source":{"line":41,"path":"src/Types/init.luau"}},{"name":"ZoneParts","desc":"An array of BaseParts","lua_type":"{BasePart}","tags":["private_types"],"source":{"line":50,"path":"src/Types/init.luau"}}],"name":"Zone","desc":"Public facade for a single Zone created by:\\n\\n`Zoner.New(...)`, `Zoner.NewFromContainer(...)` `Zoner.NewZoneFromRegion(...)`, or `Zoner.NewZoneFromBox(...)`. \\n \\nExposes read-only state, configuration helpers, signals, and utilities while hiding internal engine details.\\n\\n**Surface**\\n- Read-only state: `Identifier`, `Active`, `Destroyed`, `Relocated`, `Paused`, `Visible`,\\n  plus detection/simulation/rate fields.\\n- Signals:\\n  - `PlayerEntered`, `PlayerExited`\\n  - `PartEntered`, `PartExited`\\n  - `LocalPlayerEntered`, `LocalPlayerExited` (client only)\\n- Configuration:\\n  - `SetDetection(DetectionCoverage, DetectionMode)`\\n  - `SetRate(Rate)`\\n  - `SetSimulation(Simulation)`\\n- Utilities:\\n  - `GetRandomPoint()` \u2014 random point from part-backed or partless box bounds\\n  - `GetTouchingParts()` \u2014 parts overlapping the zone\u2019s bounds\\n  - `Relocate()` \u2014 move content into a WorldModel for spatial queries\\n  - `LogConfig()` \u2014 configuration dump\\n- Grouping:\\n  - `BindToGroup(name)`, `UnbindFromGroup(name)`, `InGroup(name)`\\n\\n**Bounds & detection**\\n- Zones can be part-backed (Instances) or partless (CFrame/Size boxes).\\n- Uses enums supplied by `Zoner.Enum` with sensible defaults.\\n\\n**Run-context**\\n- `LocalPlayer*` signals are client-only.\\n- Methods do not yield.\\n\\n**Example**\\n```lua\\n--!strict\\nlocal Zoner = require(path.to.Zoner)\\n\\nlocal Zone: Zoner.Zone = Zoner.New(workspace.ZonePart, {\\n\\tExecution = Zoner.Enum.Execution.Parallel;\\n\\tBounds    = Zoner.Enum.Bounds.Automatic;\\n})\\n\\nZone.PlayerEntered:Connect(function(Player: Player)\\n\\tprint(player.Name, \\"Entered\\")\\nend)\\n\\nZone:SetDetection(Zoner.Enum.DetectionCoverage.Center, Zoner.Enum.DetectionMode.Point)\\n```","tags":["public_api"],"source":{"line":82,"path":"src/Types/PublicZone.luau"}}')}}]);