"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[733],{9024:e=>{e.exports=JSON.parse('{"functions":[{"name":"SetupGroup","desc":"Initializes a group\'s cached data and begins listening to its `Zones` attribute changes.","params":[{"name":"Group","desc":"","lua_type":"Types.GroupsFolderGroup The groups-folder child representing a single zone group."}],"returns":[],"function_type":"static","since":"0.9.9","private":true,"source":{"line":122,"path":"src/Modules/Internal/Groups.luau"}},{"name":"RemoveGroup","desc":"Releases listeners, clears cached tables, and removes the group from `ZoneGroups`.","params":[{"name":"Group","desc":"The groups-folder child to tear down.","lua_type":"Types.GroupsFolderGroup"}],"returns":[],"function_type":"static","since":"0.9.9","private":true,"source":{"line":157,"path":"src/Modules/Internal/Groups.luau"}},{"name":"InitializeActorListeners","desc":"Initialize listeners on the root Zoner folder (per VM).\\n\\n\\nScans existing groups under `ZonerFolder.Groups` and attaches listeners so the internal cache mirrors:\\n- Group property attributes on the group folder.\\n- Zone membership attributes on each group\'s `Zones` configuration.","params":[{"name":"ZonerFolder","desc":"The root folder containing the `Groups` container and group children.","lua_type":"Types.ZonerFolder"}],"returns":[],"function_type":"static","since":"0.9.9","source":{"line":200,"path":"src/Modules/Internal/Groups.luau"}},{"name":"DeinitializeActorListeners","desc":"Stop and clean up all listeners and cached state created by `InitializeActorListeners`.\\n\\nDisconnects per-group attribute listeners, clears cached maps, and disconnects group add/remove listeners.","params":[],"returns":[],"function_type":"static","since":"0.9.9","source":{"line":226,"path":"src/Modules/Internal/Groups.luau"}},{"name":"IsZoneInGroup","desc":"Check whether a ZoneId is currently recorded in a given group.","params":[{"name":"ZoneId","desc":"The Zone identifier (attribute name on the group\'s `Zones` folder).","lua_type":"string"},{"name":"GroupKey","desc":"The group name key (index into `ZoneGroups`).","lua_type":"string"}],"returns":[{"desc":"Whether the given `ZoneId` is part of the group right now.","lua_type":"boolean"}],"function_type":"static","since":"0.9.9","source":{"line":271,"path":"src/Modules/Internal/Groups.luau"}},{"name":"CreateGroup","desc":"Create a new group folder under `ZonerFolder.Groups` for **serial** execution contexts, mirror its properties,\\nand begin listening to its `Zones` attributes.","params":[{"name":"GroupName","desc":"Name of the group to create.","lua_type":"string"},{"name":"Properties","desc":"Properties to set as attributes on the group.","lua_type":"ZoneGroupProperties"},{"name":"ZonerFolder","desc":"The owning Zoner folder for this VM.","lua_type":"Types.ZonerFolder"}],"returns":[],"function_type":"static","since":"0.9.9","source":{"line":289,"path":"src/Modules/Internal/Groups.luau"}},{"name":"AddZoneToGroup","desc":"Bind a zone to a group in **serial** contexts by setting the ID attribute on the group\'s `Zones` config\\nand updating the in-memory cache.","params":[{"name":"ZoneId","desc":"Zone identifier to add.","lua_type":"string"},{"name":"GroupName","desc":"Target group key.","lua_type":"string"},{"name":"ZonerFolder","desc":"The owning Zoner folder for this VM.","lua_type":"Types.ZonerFolder"}],"returns":[],"function_type":"static","since":"0.9.9","source":{"line":324,"path":"src/Modules/Internal/Groups.luau"}},{"name":"RemoveZoneFromGroup","desc":"Unbind a zone from a group in **serial** contexts by clearing the ID attribute and cache entry.","params":[{"name":"ZoneId","desc":"Zone identifier to remove.","lua_type":"string"},{"name":"GroupName","desc":"Target group key.","lua_type":"string"},{"name":"ZonerFolder","desc":"The owning Zoner folder for this VM.","lua_type":"Types.ZonerFolder"}],"returns":[],"function_type":"static","since":"0.9.9","source":{"line":351,"path":"src/Modules/Internal/Groups.luau"}},{"name":"RemoveZoneFromGroups","desc":"Remove a zone from **all** groups for this VM if present.","params":[{"name":"ZoneId","desc":"Zone identifier to purge.","lua_type":"string"},{"name":"ZonerFolder","desc":"The owning Zoner folder for this VM.","lua_type":"Types.ZonerFolder"}],"returns":[],"function_type":"static","since":"0.9.9","private":true,"source":{"line":378,"path":"src/Modules/Internal/Groups.luau"}}],"properties":[{"name":"ZoneGroups","desc":"Holds all known groups keyed by group name. Populated by `InitializeActorListeners`. Cleared by `DeinitializeActorListeners`.","lua_type":"ZoneGroups","source":{"line":93,"path":"src/Modules/Internal/Groups.luau"}},{"name":"ZoneGroupAdded","desc":"Connection for when a group is added under `ZonerFolder.Groups`. Established by `InitializeActorListeners`.","lua_type":"RBXScriptConnection?","source":{"line":99,"path":"src/Modules/Internal/Groups.luau"}},{"name":"ZoneGroupRemoved","desc":"Connection for when a group is removed from `ZonerFolder.Groups`. Established by `InitializeActorListeners`.","lua_type":"RBXScriptConnection?","source":{"line":105,"path":"src/Modules/Internal/Groups.luau"}},{"name":"ActorInitialized","desc":"Whether this Groups singleton has been initialized by the VM that required it.","lua_type":"boolean","source":{"line":111,"path":"src/Modules/Internal/Groups.luau"}}],"types":[{"name":"ZoneGroupData","desc":"","fields":[{"name":"Zones","lua_type":"{ [string]: true? }","desc":"Map of ZoneId -> true (present) or nil (absent) for O(1) membership checks."},{"name":"ZonesFolder","lua_type":"Configuration","desc":"Reference to the group\'s `Zones` folder (source of truth via attributes)."},{"name":"Properties","lua_type":"ZoneGroupProperties","desc":"Snapshot of group properties from `GetAttributes()` on the group."},{"name":"AttributeChanged","lua_type":"RBXScriptConnection","desc":"Connection tracking attribute changes on `ZonesFolder`."}],"since":"0.9.9","source":{"line":59,"path":"src/Modules/Internal/Groups.luau"}},{"name":"ZoneGroupProperties","desc":"","fields":[{"name":"Exclusive","lua_type":"boolean","desc":"Whether tracked items can be in more than one zone of this group simultaneously."}],"since":"0.9.8","source":{"line":73,"path":"src/Modules/Internal/Groups.luau"}},{"name":"ZoneGroups","desc":"Map of group name -> `ZoneGroupData`.","lua_type":"{[string]: ZoneGroupData}","source":{"line":82,"path":"src/Modules/Internal/Groups.luau"}}],"name":"Groups","desc":"Manages **Zone Groups** within a Zoner system.  \\nEach Group keeps a fast in-memory dictionary of Zone IDs (attributes on a `Zones` folder) so lookups like\\n`IsZoneInGroup` are O(1).\\n\\n**Design (Module-as-Table, shared per-VM)**\\n- Exposes a **module table** that caches group data.\\n- Because it\u2019s a table, any script that `require`s it **within the same VM** shares the same state (an in-VM singleton).\\n- Multiple modules in the same VM can read group properties from this shared cache without walking the DataModel.\\n\\n**VM Registration (Actors)**\\n- Register this module inside **each** Zoner Actor VM: `require` it and call `InitializeActorListeners` with that VM\u2019s `ZonerFolder`.\\n- Each VM keeps its **own synchronized copy** of group data, automatically updated by attribute-change signals on that VM\u2019s `ZonerFolder`.\\n- This keeps groups and their properties up to date **in every Actor VM**, making property access fast and straightforward.\\n\\n**Lifecycle**\\n- Call `InitializeActorListeners` once (per VM) with the root `ZonerFolder` to index existing groups and attach listeners.\\n- Later, call `DeinitializeActorListeners` to disconnect signals and clear all cached data.\\n\\n**Data Flow**\\n- Group folders live under `ZonerFolder.Groups`.\\n- Each group contains a `Zones` `Configuration` whose attributes are Zone IDs with boolean values (`true` or `nil`).\\n- Attribute changes on that `Zones` configuration drive the internal `Zones` map for the group.\\n\\n**Threading**\\n- Uses `RBXScriptConnection` signals; none of the public APIs yield.","since":"0.9.9","private":true,"source":{"line":41,"path":"src/Modules/Internal/Groups.luau"}}')}}]);